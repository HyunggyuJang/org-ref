#+title: Pretty thorough example of refproc
#+latex_header: \usepackage{cleveref}
#+refproc: :abbreviate t :capitalize t

* Introduction
  :PROPERTIES:
  :CUSTOM_ID: sec-intro
  :END:

This document is a set of examples to see how the org-ref cross-reference processor works. Go to [[*build]] to run the preprocessor and do the exports.

** section references
   :PROPERTIES:
   :CUSTOM_ID: sec-headings
   :END:

- ref :: ref:sec-intro
- autoref :: autoref:sec-intro
- nameref :: nameref:sec-intro
- pageref :: pageref:sec-intro
- cref, one :: cref:sec-intro
- cref, two :: cref:sec-intro,sec-headings
- cref, three, sorted :: cref:sec-tables,sec-intro,sec-headings
- Cref :: Cref:sec-intro
- Cref, two :: Cref:sec-intro,sec-headings
- Cref, three, sorted :: Cref:sec-tables,sec-intro,sec-headings


** tables refs
   :PROPERTIES:
   :CUSTOM_ID: sec-tables
   :END:

#+name: b1
#+caption: this is a table b1.
| 3 | 4 |


#+name: b2
#+caption: this is a table b2.
| 3 | 4 |


- ref :: ref:b1
- autoref :: autoref:b1
- nameref :: nameref:b1
- pageref :: pageref:b1
- cref :: cref cref:b1
- cref, two :: cref:b1,b2
- Cref :: Cref:b1
- Cref, two :: Cref:b1,b2

** equations

#+name: q1
\begin{equation}
3+3=6
\end{equation}

#+name: q2
\begin{equation}
3+3=6
\end{equation}

- eqref :: eqref:q1
- autoref :: autoref:q1

- cref :: cref:q1,q2
- Cref :: Cref:q1,q2


** Listings

#+attr_latex: :placement [H]
#+name: s1
#+caption: listing caption s1
#+BEGIN_SRC jupyter-python
%matplotlib inline
import matplotlib.pyplot as plt

plt.plot([1, 2, 4])
#+END_SRC

#+RESULTS: s1
:RESULTS:
| <matplotlib.lines.Line2D | at | 0x7fb4f0429b80> |
[[file:./.ob-jupyter/46ed61e65bf11890f8772850057bb35847f984b8.png]]
:END:

#+attr_latex: :placement [H]
#+name: s2
#+caption: listing caption s2
#+BEGIN_SRC jupyter-python
%matplotlib inline
import matplotlib.pyplot as plt

plt.plot([1, 2, 4])
#+END_SRC

#+attr_latex: :placement [H]
#+name: s3
#+caption: listing caption s3
#+BEGIN_SRC jupyter-python
%matplotlib inline
import matplotlib.pyplot as plt

plt.plot([1, 2, 4])
#+END_SRC

#+attr_latex: :placement [H]
#+name: s4
#+caption: listing caption s4
#+BEGIN_SRC jupyter-python
%matplotlib inline
import matplotlib.pyplot as plt

plt.plot([1, 2, 4])
#+END_SRC

- ref :: ref:s1
- autoref :: autoref:s1
- nameref :: nameref:s1
- cref :: cref:s1
- cref, 2 :: cref:s1,s2  listings 1 and 2
- cref, 2, sorted :: cref:s2,s1  listings 1 and 2, cref does sorting!
- cref, 3 :: cref:s1,s3,s4  listings 1, 3 and 4
- cref, 4 :: cref:s1,s2,s3,s4  listings 1 to 4 (this seems too clever! you would have to be able to tell they were sequential.)
- Cref :: Cref:s1
- Cref :: Cref:s1,s2

** figures

#+attr_latex: :placement [H]
#+name: g1
#+caption: figure caption g1
[[file:./.ob-jupyter/46ed61e65bf11890f8772850057bb35847f984b8.png]]


#+attr_latex: :placement [H]
#+name: g2
#+caption: figure caption g2
[[file:./.ob-jupyter/46ed61e65bf11890f8772850057bb35847f984b8.png]]


- ref :: ref:g1
- nameref ::  nameref:g1
- pageref :: pageref:g1
- autoref :: autoref:g1

- cref :: cref:g1
- cref,2 :: cref:g1,g2
- Cref :: Cref:g1
- Cref :: Cref:g1,g2

** Mixed cref

- cref:b1,sec-intro,s1,g1,b2,s2,s4,s3
- Cref:b1,sec-intro,s1,g1,b2,s2,s4,s3

- cref:sec-intro,s1,g1,b2,s2,s4,s3,b1
- Cref:sec-intro,s1,g1,b2,s2,s4,s3,b1


* build
  :PROPERTIES:
  :CUSTOM_ID: build
  :END:

An alternative to using these blocks is to define the hook as a file local variable.

** HTML
#+BEGIN_SRC emacs-lisp
(let ((org-export-before-parsing-hook '(org-ref-refproc)))
  (org-open-file (org-html-export-to-html)))
#+END_SRC

#+RESULTS:

** To an org buffer

#+BEGIN_SRC emacs-lisp
(let ((org-export-before-parsing-hook '(org-ref-refproc)))
   (org-org-export-as-org))
#+END_SRC

** LaTeX

It isn't clear why you would go this route, since org-ref is for LaTeX in the
first place, but this does work nicely.

#+BEGIN_SRC emacs-lisp
(let ((org-export-before-parsing-hook '(org-ref-refproc)))
  (org-open-file (org-babel-latex-tex-to-pdf (org-latex-export-to-latex))))
#+END_SRC

#+RESULTS:
